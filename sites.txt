https://www.shadertoy.com/
https://www.shadertoy.com/view/lssBD7
https://www.shadertoy.com/view/XsSSWW
https://www.shadertoy.com/view/4dsGRn

https://github.com/Meirshomron/RayTracer
https://github.com/Meirshomron/RayTracer/blob/master/rayTracer/res/shaders/rayTracerShader.glsl
https://github.com/Meirshomron/RayTracer/blob/master/rayTracer/res/shaders/rayTracerShader.vs
https://github.com/olesgedz/glslTest/tree/master/miniRT

https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-ray-tracing/implementing-the-raytracing-algorithm.html

https://www.reddit.com/r/GraphicsProgramming/comments/pudchw/how_do_we_write_a_ray_tracer_in_opengl/
https://www.reddit.com/r/GraphicsProgramming/comments/pudchw/comment/he27893/


spectral rendering
https://www.shadertoy.com/view/XsjyWz
https://www.shadertoy.com/view/4s3cRr
https://www.shadertoy.com/view/wlSXz3

https://eclat-digital.com/spectral-rendering/

for (int j = 0; j < imageHeight; ++j) { 
    for (int i = 0; i < imageWidth; ++i) { 
        // compute primary ray direction
        Ray primRay; 
        computePrimRay(i, j, &primRay); 
        // shoot prim ray in the scene and search for the intersection
        Point pHit; 
        Normal nHit; 
        float minDist = INFINITY; 
        Object object = NULL; 
        for (int k = 0; k < objects.size(); ++k) { 
            if (Intersect(objects[k], primRay, &pHit, &nHit)) { 
                float distance = Distance(eyePosition, pHit); 
                if (distance < minDistance) { 
                    object = objects[k]; 
                    minDistance = distance;  //update min distance 
                } 
            } 
        } 
        if (object != NULL) { 
            // compute illumination
            Ray shadowRay; 
            shadowRay.direction = lightPosition - pHit; 
            bool isShadow = false; 
            for (int k = 0; k < objects.size(); ++k) { 
                if (Intersect(objects[k], shadowRay)) { 
                    isInShadow = true; 
                    break; 
                } 
            } 
        } 
        if (!isInShadow) 
            pixels[i][j] = object->color * light.brightness; 
        else 
            pixels[i][j] = 0; 
    } 
} 